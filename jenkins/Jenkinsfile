pipeline {
    agent any

    options {
        timestamps()
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/HarshaDoda/devops-cicd-project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker-compose -f app/docker-compose.yml build'
            }
        }

        stage('Run Tests') {
            steps {
                bat 'docker-compose -f app/docker-compose.yml run --rm web python -m pytest tests/'
            }
        }

        stage('Code Quality Scan') {
            steps {
                echo 'Code quality analysis placeholder'
                // Uncomment if using SonarQube
                // withSonarQubeEnv('sonarqube') {
                //     bat 'sonar-scanner'
                // }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    script {
                        withCredentials([usernamePassword(
                            credentialsId: 'dockerhub-creds',
                            usernameVariable: 'DOCKER_HUB_USR',
                            passwordVariable: 'DOCKER_HUB_PSW'
                        )]) {
                            bat '''
                            docker build -t %DOCKER_HUB_USR%/myapp:latest .
                            echo %DOCKER_HUB_PSW% | docker login -u %DOCKER_HUB_USR% --password-stdin
                            docker push %DOCKER_HUB_USR%/myapp:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Locally') {
            steps {
                dir('app') {
                    bat 'docker-compose up -d'
                }
            }
        }
    }

    // Optional: Slack notifications
    // post {
    //     success {
    //         slackSend(color: 'good', message: "✅ Build #${BUILD_NUMBER} succeeded!")
    //     }
    //     failure {
    //         slackSend(color: 'danger', message: "❌ Build #${BUILD_NUMBER} failed!")
    //     }
    // }
}
